<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构复习总结 | 第一期 | 绪论</title>
      <link href="/posts/ceb59870.html"/>
      <url>/posts/ceb59870.html</url>
      
        <content type="html"><![CDATA[<h2 id="复习重点"><a href="#复习重点" class="headerlink" title="复习重点"></a>复习重点</h2><p>该章复习主要掌握<strong>算法概念</strong>、深入理解<strong>逻辑结构和存储结构的关系</strong>、认清<strong>什么是数据结构</strong>和学会<strong>对算法分析其时间和空间复杂度</strong>。其中对算法的分析尤为重要，是历年考试的重点。</p><h2 id="逻辑结构和存储结构"><a href="#逻辑结构和存储结构" class="headerlink" title="逻辑结构和存储结构"></a>逻辑结构和存储结构</h2><p><strong>Notes：</strong></p><ul><li>逻辑结构是指数据元素之间的逻辑关系，独立于计算机，与数据的存储无关。</li><li>笼统地讲，逻辑结构有四种：“没关系”，“一对一”，“一对多”，“多对多”。简单地讲对应于集合，线性结构，树形结构，图状结构和网状结构。</li><li>存储结构，也称为物理结构，它包括数据元素及其关系的表示，指数据结构在计算机中的表示或映像（或计算机语言实现逻辑结构）。</li><li>存储结构主要包括：顺序存储、链式存储、索引存储和散列存储。重点在顺序和链式存储。顺序结构支持随机存取（Random Access），而链式结构只能实现顺序存取。链式结构重点代码如下：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> data;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125;LNode;</span><br><span class="line"></span><br><span class="line">LNode *L;</span><br><span class="line">L = (LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">A-&gt;next = B;</span><br><span class="line">B-&gt;next = C;</span><br></pre></td></tr></table></figure><h2 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h2><p><strong>Notes:</strong></p><ul><li>数据结构包括三方面：逻辑结构、存储结构和数据的运算（基本操作集）。运算的定义是针对逻辑结构的，指明其功能；运算的实现是针对存储结构的，指出具体步骤。</li><li>算法（Algorithm）是对特定问题求解步骤的一种描述，≠程序，且必须具备有穷性、确定性和可行性（其他特性：输入和输出）。</li><li>算法的时间复杂度不仅依赖于问题的规模<em>n</em>，也取决于待输入数据的性质（如输入数据元素的初始状态）。</li><li>算法的设计取决于所选定的逻辑结构，算法的实现依赖于所采用的存储结构。</li></ul><h2 id="时间复杂度和空间复杂度"><a href="#时间复杂度和空间复杂度" class="headerlink" title="时间复杂度和空间复杂度"></a>时间复杂度和空间复杂度</h2><p><strong>Notes：</strong></p><ul><li><p>时间和空间复杂度是对算法效率的度量。算法中所有语句的频度之和记为T(n)，时间复杂度就是分析其数量级。通常采用算法中的基本运算的频度f(n)来分析算法的时间复杂度：T(n)&#x3D;O(f(n))。</p></li><li><p>时间复杂度的一些规则和公式：</p><p>a) 加法规则：$$T(n)&#x3D;T_1(n)+T_2(n)&#x3D;O(f(n))+O(g(n))&#x3D;O(max(f(n),g(n)))$$</p><p>b) 乘法规则：$$T(n)&#x3D;T_1(n)×T_2(n)&#x3D;O(f(n))×O(g(n))&#x3D;O(f(n)×g(n))$$</p><p>c) 特定情况下简化计算的公式：</p><img src="/img/tupian.png" width="60%" height="60%" /><p>d) 常见的渐近时间复杂度：$$ \small O(1)&lt;O(log_2n)&lt;O(n)&lt;O(nlog_2n)&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n^n) $$</p></li><li><p>空间复杂度S(n)定义为该算法所耗费的存储空间，是问题规模n的函数。</p></li><li><p>算法原地工作是指算法所需的辅助空间为常量，即O(1)。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>除夕夜前，自己的第一个博客出炉</title>
      <link href="/posts/ee9e06b0.html"/>
      <url>/posts/ee9e06b0.html</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>​作为一名计算机专业的学生，总觉得自己应该有一个blog，同时还在网上看到了许多精美的个人blog，因此这个博客就诞生了（庆祝！！！）。这个博客的搭建是利用hexo框架+github搭建起来的，基本没有用到什么前端的知识（前端小白就可以搭建），有搭建想法的朋友可以参考<a href="https://anzhiy.cn/posts/ddae.html">保姆级教程</a>。</p><p>我之后会尽量持续更新和维护博客，或许不久后会加入评论系统，欢迎有兴趣的朋友持续关注哇。要是github托管下网速过于不稳定，之后可能会考虑利用服务器。</p><h2 id="祝福"><a href="#祝福" class="headerlink" title="祝福"></a>祝福</h2><p>​最后祝大家除夕夜快乐！！！</p><p>送给大家一个除夕<a href="../firework.html">烟火秀</a>。如果没有声音或过于卡顿，可以点<a href="https://cantelope.org/NYE/">此</a>欣赏。烟火秀的代码是在github开源代码上做了部分修改，有兴趣的朋友可以点击<a href="https://github.com/SakuraLQY/FireWorks">源码</a>链接自行查看github上的开源代码。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
  
</search>
